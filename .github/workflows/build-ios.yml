name: Build Chromium iOS (Unsigned)

on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: 'Use gclient cache'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      target:
        description: 'Build target (chrome, content_shell, ios_web_shell)'
        required: true
        default: 'chrome'
        type: choice
        options:
        - chrome
        - content_shell
        - ios_web_shell
      ios_version:
        description: 'Minimum iOS version requirement'
        required: true
        default: '15.0'
        type: choice
        options:
        - '15.0'
        - '16.0'
        - '17.0'
        - '18.0'

jobs:
  build:
    name: Build Chromium iOS
    runs-on: macos-15
    timeout-minutes: 480  # 8 hours timeout for large builds
    
    env:
      DEVELOPER_DIR: /Applications/Xcode_26.0.app/Contents/Developer
      DEPOT_TOOLS_PATH: /Users/runner/depot_tools
      CHROMIUM_PATH: /Users/runner/chromium
      GCLIENT_CACHE_PATH: /Users/runner/gclient_cache
      
    steps:
    - name: Cache gclient cache
      if: github.event.inputs.use_cache == 'true'
      uses: actions/cache@v4
      with:
        path: ${{ env.GCLIENT_CACHE_PATH }}
        key: ${{ runner.os }}-gclient-cache
        restore-keys: |
          ${{ runner.os }}-gclient-cache

    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '26.0'
        
    - name: Accept Xcode license
      run: |
        sudo xcodebuild -license accept
        
    - name: Check iOS Simulator
      run: |
        xcrun simctl list runtimes | head -10
        
    - name: Show system information
      run: |
        xcodebuild -version
        xcode-select -p
        
    - name: Install depot_tools
      run: |
        cd $HOME
        if [ ! -d "depot_tools" ]; then
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        fi
        echo "$HOME/depot_tools" >> $GITHUB_PATH
        echo "$HOME/depot_tools/python-bin" >> $GITHUB_PATH
        
    - name: Setup depot_tools environment
      run: |
        export PATH="$HOME/depot_tools:$HOME/depot_tools/python-bin:$PATH"
        
        # Configure git for better progress display
        git config --global progress.status always
        git config --global core.preloadindex true
        git config --global transfer.fsckObjects false
        git config --global fetch.writeCommitGraph true
        
        gclient --version
        
    - name: Create chromium directory and fetch code
      run: |
        mkdir -p $HOME/chromium
        cd $HOME/chromium
        export PATH="$HOME/depot_tools:$HOME/depot_tools/python-bin:$PATH"
        fetch --no-history ios
        
    - name: Verify source code
      run: |
        cd $HOME/chromium
        echo "Verifying Chromium source..."
        ls -la src/
        
    - name: Check available SDKs and setup build
      run: |
        cd ${{ env.CHROMIUM_PATH }}/src
        export PATH="$HOME/depot_tools:$HOME/depot_tools/python-bin:$PATH"
        
        # Check available iOS SDKs
        echo "🔍 Checking available iOS SDKs..."
        IOS_SDK_PATH="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs"
        XCODE_SDK_PATH="/Applications/Xcode_16.1.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs"
        
        echo "Looking for iOS SDKs in:"
        echo "  $IOS_SDK_PATH"
        echo "  $XCODE_SDK_PATH"
        
        # List available iOS SDKs
        if [ -d "$IOS_SDK_PATH" ]; then
          echo "iOS SDKs found:"
          ls -la "$IOS_SDK_PATH" | grep -i ios || echo "  No iOS SDKs found in default location"
        fi
        
        if [ -d "$XCODE_SDK_PATH" ]; then
          echo "iOS SDKs in Xcode_16.1:"
          ls -la "$XCODE_SDK_PATH" | grep -i ios || echo "  No iOS SDKs found in Xcode_16.1"
        fi
        
        # Check macOS SDKs for comparison
        echo "Available macOS SDKs:"
        ls -la /Applications/Xcode_16.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
        
        # Create .setup-gn config for unsigned builds
        IOS_VERSION="${{ github.event.inputs.ios_version || '15.0' }}"
        echo "Setting iOS deployment target to: $IOS_VERSION"
        
        cat > .setup-gn << EOF
        [gn_args]
        target_os="ios"
        target_cpu="arm64"
        target_environment="simulator"
        target_platform="ios"
        ios_enable_code_signing=false
        ios_deployment_target="$IOS_VERSION"
        is_debug=false
        is_component_build=false
        symbol_level=1
        enable_dsyms=false
        use_blink=true
        ios_chromium_bundle_id="org.chromium.chrome.ios.dev"
        ios_content_shell_bundle_identifier="org.chromium.content-shell"
        ios_code_signing_identity=""
        ios_app_bundle_id_prefix="org.chromium"
        # Force iOS SDK usage
        ios_sdk_path=""
        mac_sdk_min="14.0"
        EOF
        
        # Run setup-gn.py to configure build
        python3 ios/build/tools/setup-gn.py
        
    - name: Build Chromium iOS
      run: |
        cd ${{ env.CHROMIUM_PATH }}/src
        export PATH="$HOME/depot_tools:$HOME/depot_tools/python-bin:$PATH"
        
        TARGET="${{ github.event.inputs.target || 'chrome' }}"
        echo "Building target: $TARGET"
        
        # Build for iOS device (unsigned)
        autoninja -C out/Release-iphoneos $TARGET
        
    - name: Create unsigned IPA
      run: |
        cd ${{ env.CHROMIUM_PATH }}/src
        TARGET="${{ github.event.inputs.target || 'chrome' }}"
        
        # Find the built app
        APP_PATH="out/Release-iphoneos/${TARGET}.app"
        if [ ! -d "$APP_PATH" ]; then
          echo "App not found at $APP_PATH"
          ls -la out/Release-iphoneos/
          exit 1
        fi
        
        # Create Payload directory and copy app
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/
        
        # Create IPA (it's just a zip file)
        zip -r "${TARGET}-unsigned-$(date +%Y%m%d-%H%M%S).ipa" Payload
        
        # Clean up
        rm -rf Payload
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: chromium-ios-unsigned-ipa
        path: ${{ github.workspace }}/../chromium/src/*.ipa
        retention-days: 7
        
    - name: Show build information
      run: |
        cd ${{ env.CHROMIUM_PATH }}/src
        echo "Build completed successfully!"
        echo "Generated IPA files:"
        ls -la *.ipa
        
    - name: Debug with tmate on failure
      if: failure()
      uses: mxschmitt/action-tmate@v3